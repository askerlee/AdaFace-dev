model:
  base_lr: 2e-06
  weight_decay: 0.0

  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    # linear_start/linear_end: params for linear beta schedule.
    beta_schedule:    linear
    linear_start:     0.00085
    linear_end:       0.0120
    log_every_t:      200
    timesteps:        1000
    first_stage_key:  image
    cond_stage_key:   caption
    image_size:       64
    channels:         4
    # Since we want to train the embedding manager, we set embedding_manager_trainable = True.
    embedding_manager_trainable: True
    monitor:                     train/loss
    scale_factor:                     0.18215
    unfreeze_unet:                    False
    unet_lr:                          0.0
    use_layerwise_embedding:          True
    use_fp_trick:                     True
    do_comp_teacher_filtering:        True
    num_candidate_comp_teachers:      2
    composition_regs_iter_gap:        -1
    unet_teacher_types:               ['consistentID', 'arc2face']
    p_unet_teacher_uses_cfg:          0.6
    unet_teacher_cfg_scale_range:     [1.3, 2.0]
    # The percentage of unet_distill_iter among do_normal_recon iters.
    # p_unet_distill_iter = 0.5 means at 50% of the non-compositional iters, 
    # we use the unet teacher's output as the target (do_unet_distill).
    # at the other 50%, we use the original image as the target (do_normal_recon).
    p_unet_distill_iter:              0.5
    # Even if setting id2img_prompt_encoder_trainable to True, 
    # the performance is only slightly differ.
    id2img_prompt_encoder_trainable:  False
    # The ratio of the id2img_prompt_encoder's lr to the main model's lr. Only effective when trainable.
    id2img_prompt_encoder_lr_ratio:   0.001
    p_gen_id2img_rand_id:             0.2
    # the delta recon loss is only computed when perturb_face_id_embs.
    p_perturb_face_id_embs:           0.6
    # ConsistentID image embeddings are quite robust to random perturbations, so we set
    # a large std range of [0.5, 1.5].
    perturb_face_id_embs_std_range:   [0.5, 1]
    recon_delta_loss_boost:           1
    # typical delta reg loss: 0.85, * weight -> 1.7e-4
    prompt_emb_delta_reg_weight:      1e-5
    # typical loss_mix_prompt_distill: 0.06, * weight -> 6e-5.
    mix_prompt_distill_weight:        1e-4
    # Apply BN/LN on cross-attn Q and out features for loss computation.
    normalize_ca_q_and_outfeat:       True
    comp_fg_bg_preserve_loss_weight:  1e-3
    # fg_bg_complementary loss: used in recon / unet_distill iters.
    # loss_fg_bg_complementary: 1.5,  * weight -> 7.5e-4
    fg_bg_complementary_loss_weight:  2e-4
    # loss_fg_xlayer_consist ~ 0.2, loss_bg_xlayer_consist ~ 0.1. * weight -> 3e-4.
    fg_bg_xlayer_consist_loss_weight: 5e-5

    # AdamW, AdamW8bit, Adam8bit, NAdam, Prodigy
    optimizer_type:           AdamW8bit
    grad_clip:                0.5
    adam_config:
      # Half life:
      # 0.995  0.996  0.997  0.998  0.999
      # 138    172    231    346    693
      # We set beta2 to 0.995 for faster update of the estimated variances.
      betas:                  [0.9,  0.995]  
      scheduler_config:
        target: ldm.modules.lr_scheduler.LambdaWarmUpCosineScheduler
        params:
          verbosity_interval: 0
          warm_up_steps:      500
          lr_start:           0.01
          lr_max:             1.0
          lr_min:             0.1

    prodigy_config:
      betas:    [0.985, 0.993]   # Faster to converge than zs_betas.
      zs_betas: [0.9,   0.999]   # Slower to converge than betas.
      d_coef:           5
      warm_up_steps:    500
      # 1 cycle after the warm_up_steps.
      # Each cycle is linearly decreasing the LR from base_lr to 0.09*base.
      scheduler_cycles: 1
      # CyclicLR, CosineAnnealingWarmRestarts, Linear. 
      # Linear or CosineAnnealingWarmRestarts doesn't work well.
      scheduler_type: 'Linear'
      
    personalization_config:
      target: ldm.modules.embedding_manager.EmbeddingManager
      params:
        subject_strings:                    ['z']
        background_strings:                 ['y']
        subj_name_to_cls_delta_string:      { 'z': "person", 'rand_id_to_img_prompt': 'person' }
        token2num_vectors:                  {'z': 4, 'y': 4}
        use_layerwise_embedding: True
        training_begin_perturb_std_range:   [ 0.05, 0.1 ]
        training_end_perturb_std_range:     [ 0.05, 0.1 ]
        # probs for recon_iter and compos_distill_iter, respectively
        training_perturb_prob:              { 'recon_iter':            0.6, 
                                              'unet_distill_iter':     0.4,
                                              'compos_distill_iter':   0.4 }
        adaface_ckpt_paths:                  null
        id2ada_prompt_encoder_type:         ['consistentID', 'arc2face']
        # Load the ada components from these placeholders in the checkpoint.

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        image_size: 32 # unused
        in_channels: 4
        out_channels: 4
        model_channels: 320
        attention_resolutions: [ 4, 2, 1 ]
        num_res_blocks: 2
        channel_mult: [ 1, 2, 4, 4 ]
        num_heads: 8
        use_spatial_transformer: True
        transformer_depth: 1
        context_dim: 768
        use_checkpoint: True
        legacy: False
        
    first_stage_config:
      target: ldm.models.autoencoder.AutoencoderKL
      params:
        embed_dim: 4
        monitor: train/loss_recon
        ddconfig:
          double_z: true
          z_channels: 4
          resolution: 512
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult:
          - 1
          - 2
          - 4
          - 4
          num_res_blocks: 2
          attn_resolutions: []
          dropout: 0.0

        lossconfig:
          target: torch.nn.Identity

    cond_stage_config:
      target: ldm.modules.encoders.modules.FrozenCLIPEmbedder
      params:
        last_layers_skip_weights: [0.5, 0.5]

data:
  target: main.DataModuleFromConfig
  params:
    # Since we optimize two subj basis generators, we can only afford a batch size of 2.
    # Effective batch size is 2 * 2 GPUs * 4 accum_grad_batches = 16.
    batch_size:  2
    num_workers: 1
    wrap: false
    max_steps: 60000
    train:
      target: ldm.data.personalized.PersonalizedBase
      params:
        size: 512       # Image resolution
        set_name: train
        repeats: 100
        verbose: false

lightning:
  modelcheckpoint:
    params:
      every_n_train_steps: 500

  trainer:
    benchmark: True
    max_steps: 60000
    num_sanity_val_steps: 0
    limit_val_batches:    0  # Disable doing validation.
    deterministic: False
    replace_sampler_ddp: False
    accumulate_grad_batches: 4
